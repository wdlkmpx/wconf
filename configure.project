#!/bin/sh

# Project name and version
PACKAGE="app"
VERSION="1.0"
PACKAGE_URL=''

# Flags that will be used in all makefiles that compile code...
PROJECT_CFLAGS='-Wall -g -O2' # -Wextra -Wno-unused-parameter -Wno-missing-field-initializers
PROJECT_CXXFLAGS="${PROJECT_CFLAGS}"
PROJECT_CPPFLAGS=''
PROJECT_LDFLAGS=''
PROJECT_LXXFLAGS=''
PROJECT_LIBS=''

# Project type, use C to avoid checking for C++ compiler and stuff
# supported values: C, C++ ("" = C++)
PROJECT_TYPE=C

# Files.in, to replace @VERSION@ and a few other variables
#  see w_conf/00_standard_infile.sh for a complete list
#w_infiles='lib/libmp3.pc'

# config.h: custom extra lines
w_config_h_extra_lines=""

# config.mk: custom extra lines
w_config_mk_extra_lines=""

#w_new_option <OPT>
#  Manually create the following funcs:
#   opt_print_<OPT>()     { }
#   opt_configure_<OPT>() { }
#   opt_check_<OPT>()     { }


# configure the project using the commands provided
# by `configure` and other scripts and commands/tools
w_main_func()
{
	# GCC=yes if gcc has been detected

	# if the Makefiles are only compatible with GNU make, use w_require_gnu_make
	#w_prefer_gnu_make

	# check required headers and exit on error
	w_check_headers_required stdio.h

	# detect the presence of headers
	# config.h: define HAVE_ZCONF_H if zconf.h is present, etc
	w_check_headers sys/types.h zconf.h

	# check header and libs
	w_check_header_and_libs lzma.h -lzma #-lotherlib1 -lotherlib2
	if [ $? -eq 0 ] ; then
		LIBS="$LIBS -lzma"
	else
		printf "" ; #handle error
		#exit_error "ERROR: lzma.h + -lzma is required"
	fi

	if w_check_cflag -fPIC ; then
		#CFLAGS="$CFLAGS -fPIC"
		w_config_mk_extra_lines="$w_config_mk_extra_lines
FPIC = -fPIC"
	fi

	# check required header and libs, adds libs to $LIBS
	w_check_header_and_libs_required zlib.h -lz

	# required commands
	w_check_commands_required sed

	# how to check for several apps and choose the 1st detected
	w_check_command_find_first mawk zawk gawk awk
	if [ -n "$wtmp_cmd" ] ; then
		myawk=$wtmp_cmd
		echo "selected awk implementation: $myawk"
		wtmp_cmd=''
	else
		exit_error "could not find a suitable awk implementation..."
	fi

	# pkgconfig
	w_pkgconfig_check popt 0.7
	if [ $? -eq 0 ] ; then
		CFLAGS="$CFLAGS $(w_pkgconfig_run --cflags popt)"
		LIBS="$LIBS $(w_pkgconfig_run --libs popt)"
		# or autotools compatible stuff
		POPT_CFLAGS=$(w_pkgconfig_run --cflags popt)
		POPT_LIBS=$(w_pkgconfig_run --libs popt)
		config_h_have="$config_h_have POPT"
		config_mk_flags="$config_mk_flags POPT"
	else
		#exit_error "popt was not found"
		echo "popt was not found"
	fi
}

# once everything is done, you can fix things, etc
w_finish_func()
{
    printf ""
}

#=====================================================================
# special scripts for optional features and various tasks
# checks are run after w_main_func
#
# - source w_conf/xxx script to support a specific feature
# - these scripts are meant to be generic, so any project can add them
# - most of these scripts can handle --enable/--disable cmd options
#   to make it easier to replace autoconf
#
# In most cases, if a feature is enabled, it will be defined in config.h
#   #define HAVE_ZLIB 1
# And config.mk
#   ZLIB_CFLAGS =
#   ZLIB_LIBS   =

GETTEXT_PACKAGE="$PACKAGE"
. w_conf/gettext

#W_GTK_IS_OPTIONAL=yes
##--
#W_GTK_DEFAULT_VERSION=3
#W_GTK2_MIN_VERSION='2.14'
#W_GTK3_MIN_VERSION='3.14'
#W_GTK4_MIN_VERSION=''
##-- support only 1 version
#W_GTK_ONLY_VERSION=2
#W_GTK_MIN_VERSION=2.24
. w_conf/gtk

#W_PTHREAD_IS_OPTIONAL=yes
. w_conf/pthread

# this file is not needed, it's generated by script, a convenience to test everything
# just copy the lines you want and paste them here
if [ -f configure.project.etc ] ; then
	. ./configure.project.etc
fi


#=====================================================================
# --with-xxx sample

extra_packages_opts="$extra_packages_opts xxx"

opt_pkg_print_xxx()
{
	echo "  --with-something        add something to CFLAGS"
	echo "  --with-type=[xx|yy]     add something to CFLAGS"
}

opt_configure_xxx()
{
	for ocm in $@
	do
		case $ocm in
		--with-something)  CFLAGS="$CFLAGS -DSOMETHING" ;;
		--with-type) exit_error "Usage is: --with-type=xx|zz" ;;
		--with-type=*)
			withval=$(getvalue $ocm)
			case $withval in
				xx|yy) CFLAGS="$CFLAGS -DFIXED_FONT=\\\"$withval\\\"" ;;
				*)  exit_error "Usage is: --with-type=xx|zz" ;;
			esac
			;;
		esac
	done
}

#=====================================================================
# --enable-xxx sample

extra_configure_opts="$extra_configure_opts xfeatx"

opt_print_xfeatx()
{
	echo '  --enable-debug          produce debug build'
	echo '  --enable-xdg            follow xdg spec for configuration and history files location'
}

opt_configure_xfeatx()
{
	enable_debug=no
	enable_xdg=no

	for i in $@
	do
		case $i in
		--enable-debug)  enable_debug='yes' ;;
		--disable-debug) enable_debug='no'  ;;
		--enable-xdg)  enable_xdg='yes' ;;
		--disable-xdg) enable_xdg='no'  ;;
		esac
	done

	if [ "$enable_debug" = "yes" ] ; then
		CFLAGS="$CFLAGS -g -DDEBUG"
	fi

	if [ "$enable_xdg" = "yes" ] ; then
		CFLAGS="$CFLAGS -DFOLLOW_XDG_SPEC"
	fi
}
